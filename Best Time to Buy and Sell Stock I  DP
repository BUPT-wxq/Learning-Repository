给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

func maxProfit(prices []int) int {
	if(len(prices)==0){
		return 0
	}
	k:=1
	dp:=make([][][]int,len(prices))
	for i:=range dp{
		dp[i]=make([][]int,k+1)
		for j:=range dp[i]{
			dp[i][j]=make([]int,2)
		}
	}
	dp[0][1][0]=0
	dp[0][0][0]=0
	dp[0][1][1]=-prices[0]
	for i:=1;i<len(prices);i++ {
		//no deal times and hold no stock
		if(dp[i-1][0][0]>dp[i-1][1][1]+prices[i]){
			dp[i][0][0]=dp[i-1][0][0]
		}else {
			dp[i][0][0]=dp[i-1][1][1]+prices[i]
		}
		//exist deal times and hold  no stock
			dp[i][1][0]=dp[i-1][1][0]
		//exist deal times and hold stock
		if(dp[i-1][1][0]-prices[i]>dp[i-1][1][1]){
			dp[i][1][1]=dp[i-1][1][0]-prices[i]
		}else {
			dp[i][1][1]=dp[i-1][1][1]
		}
	}
	if dp[len(prices)-1][1][0]>dp[len(prices)-1][0][0]{
		return dp[len(prices)-1][1][0]
	}else {
		return dp[len(prices)-1][0][0]
	}
}
