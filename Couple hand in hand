N 对情侣坐在连续排列的 2N 个座位上，想要牵到对方的手。 计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。 一次交换可选择任意两人，让他们站起来交换座位。

人和座位用 0 到 2N-1 的整数表示，情侣们按顺序编号，第一对是 (0, 1)，第二对是 (2, 3)，以此类推，最后一对是 (2N-2, 2N-1)。

这些情侣的初始座位  row[i] 是由最初始坐在第 i 个座位上的人决定的。

示例 1:

输入: row = [0, 2, 1, 3]
输出: 1
解释: 我们只需要交换row[1]和row[2]的位置即可。
示例 2:

输入: row = [3, 2, 0, 1]
输出: 0
解释: 无需交换座位，所有的情侣都已经可以手牵手了。
func minSwapsCouples(row []int) int {
	//define 0 is wife
	//define i is husband
	count:=0
	position:=make([]int,len(row))
	for x,y:=range row{
		position[y]=x
	}
	for x:=0;x<=len(row)-2;x+=2 {
		//two person is couple
		if int(row[x]/2)==int(row[x+1]/2){
                continue
		}
		//not couple
		  xx:=x
		  for int(row[xx]/2)!=int(row[xx+1]/2) {
			  if row[xx]%2 == 0 {
				  a := row[xx]
				  //c is husband's position
				  c := position[a+1]
				  row[xx+1], row[c] = row[c], row[xx+1]
				  if c%2==0{
					 xx=c
				  }else{
				  	xx=c-1
				  }
			  } else {
				  a := row[xx]
				  //c is wife's position
				  c := position[a-1]
				  row[xx+1], row[c] = row[c], row[xx+1]
				  if c%2==0{
					  xx=c
				  }else{
					  xx=c-1
				  }
			  }
			  count++
		  }
	}
    return count
}
